name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Go API Testing
  go-test:
    name: Go API Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: gaply_test
          POSTGRES_USER: gaply
          POSTGRES_PASSWORD: gaply123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: |
        cd backend-go
        go mod download

    - name: Run Go tests
      run: |
        cd backend-go
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend-go/coverage.out
        flags: go
        name: go-coverage

    - name: Run Go linter
      uses: golangci/golangci-lint-action@v3
      with:
        working-directory: ./backend-go
        version: latest

  # Python Worker Testing
  python-test:
    name: Python Worker Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd worker-python
        pip install -r requirements.txt

    - name: Run Python tests
      run: |
        cd worker-python
        pytest -v --cov=app --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./worker-python/coverage.xml
        flags: python
        name: python-coverage

    - name: Run Python linter
      run: |
        cd worker-python
        pip install black flake8 mypy
        black --check .
        flake8 .
        mypy .

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [go-test, python-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Test Go Docker build
      run: |
        cd backend-go
        docker build -t gaply-api:test .

    - name: Test Python Worker Docker build
      run: |
        cd worker-python
        docker build -t gaply-worker:test .

    - name: Test Docker Compose
      run: |
        cd infra
        docker-compose config

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [go-test, python-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Deploy (on main branch)
  build-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [go-test, python-test, docker-build, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Go API image
      run: |
        cd backend-go
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/gaply-api:latest .
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/gaply-api:latest

    - name: Build and push Python Worker image
      run: |
        cd worker-python
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/gaply-worker:latest .
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/gaply-worker:latest

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        draft: false
        prerelease: false

    - name: Notify Render (optional)
      run: |
        # This would trigger a Render deployment webhook
        # curl -X POST ${{ secrets.RENDER_DEPLOY_WEBHOOK }}
        echo "Render deployment webhook would be triggered here"
